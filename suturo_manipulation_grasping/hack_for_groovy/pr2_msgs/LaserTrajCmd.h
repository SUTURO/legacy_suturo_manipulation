/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-pr2-common-1.10.3/debian/ros-groovy-pr2-common/opt/ros/groovy/stacks/pr2_common/pr2_msgs/msg/LaserTrajCmd.msg */
#ifndef PR2_MSGS_MESSAGE_LASERTRAJCMD_H
#define PR2_MSGS_MESSAGE_LASERTRAJCMD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace pr2_msgs
{
template <class ContainerAllocator>
struct LaserTrajCmd_ {
  typedef LaserTrajCmd_<ContainerAllocator> Type;

  LaserTrajCmd_()
  : header()
  , profile()
  , position()
  , time_from_start()
  , max_velocity(0.0)
  , max_acceleration(0.0)
  {
  }

  LaserTrajCmd_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , profile(_alloc)
  , position(_alloc)
  , time_from_start(_alloc)
  , max_velocity(0.0)
  , max_acceleration(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _profile_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  profile;

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  position;

  typedef std::vector<ros::Duration, typename ContainerAllocator::template rebind<ros::Duration>::other >  _time_from_start_type;
  std::vector<ros::Duration, typename ContainerAllocator::template rebind<ros::Duration>::other >  time_from_start;

  typedef double _max_velocity_type;
  double max_velocity;

  typedef double _max_acceleration_type;
  double max_acceleration;


  typedef boost::shared_ptr< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LaserTrajCmd
typedef  ::pr2_msgs::LaserTrajCmd_<std::allocator<void> > LaserTrajCmd;

typedef boost::shared_ptr< ::pr2_msgs::LaserTrajCmd> LaserTrajCmdPtr;
typedef boost::shared_ptr< ::pr2_msgs::LaserTrajCmd const> LaserTrajCmdConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "68a1665e9079049dce55a0384cb2e9b5";
  }

  static const char* value(const  ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x68a1665e9079049dULL;
  static const uint64_t static_value2 = 0xce55a0384cb2e9b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_msgs/LaserTrajCmd";
  }

  static const char* value(const  ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message is used to set the profile that the tilt laser controller\n\
# executes.\n\
Header header\n\
string profile              # options are currently \"linear\" or \"linear_blended\"\n\
float64[] position          # Laser positions\n\
duration[] time_from_start  # Times to reach laser positions in seconds\n\
float64 max_velocity        # Set <= 0 to use default\n\
float64 max_acceleration    # Set <= 0 to use default\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.profile);
    stream.next(m.position);
    stream.next(m.time_from_start);
    stream.next(m.max_velocity);
    stream.next(m.max_acceleration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LaserTrajCmd_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_msgs::LaserTrajCmd_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "profile: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.profile);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "time_from_start[]" << std::endl;
    for (size_t i = 0; i < v.time_from_start.size(); ++i)
    {
      s << indent << "  time_from_start[" << i << "]: ";
      Printer<ros::Duration>::stream(s, indent + "  ", v.time_from_start[i]);
    }
    s << indent << "max_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.max_velocity);
    s << indent << "max_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.max_acceleration);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_MSGS_MESSAGE_LASERTRAJCMD_H

