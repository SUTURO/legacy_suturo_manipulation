/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-pr2-object-manipulation-0.7.5/debian/ros-groovy-pr2-object-manipulation/opt/ros/groovy/stacks/pr2_object_manipulation/manipulation/pr2_gripper_sensor_msgs/msg/PR2GripperPressureData.msg */
#ifndef PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERPRESSUREDATA_H
#define PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERPRESSUREDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr2_gripper_sensor_msgs
{
template <class ContainerAllocator>
struct PR2GripperPressureData_ {
  typedef PR2GripperPressureData_<ContainerAllocator> Type;

  PR2GripperPressureData_()
  : pressure_left()
  , pressure_right()
  , rostime(0.0)
  {
    pressure_left.assign(0.0);
    pressure_right.assign(0.0);
  }

  PR2GripperPressureData_(const ContainerAllocator& _alloc)
  : pressure_left()
  , pressure_right()
  , rostime(0.0)
  {
    pressure_left.assign(0.0);
    pressure_right.assign(0.0);
  }

  typedef boost::array<double, 22>  _pressure_left_type;
  boost::array<double, 22>  pressure_left;

  typedef boost::array<double, 22>  _pressure_right_type;
  boost::array<double, 22>  pressure_right;

  typedef double _rostime_type;
  double rostime;


  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PR2GripperPressureData
typedef  ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<std::allocator<void> > PR2GripperPressureData;

typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperPressureData> PR2GripperPressureDataPtr;
typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperPressureData const> PR2GripperPressureDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_gripper_sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b69255f5117bf05fdcd1e83d4e6ab779";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb69255f5117bf05fULL;
  static const uint64_t static_value2 = 0xdcd1e83d4e6ab779ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_gripper_sensor_msgs/PR2GripperPressureData";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Note: This message is intended for internal package use only and is NOT a part of the public API. This data is not publicaly published in ROS.\n\
\n\
# the pressure array for the left and right fingers\n\
float64[22] pressure_left\n\
float64[22] pressure_right\n\
\n\
float64 rostime\n\
";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pressure_left);
    stream.next(m.pressure_right);
    stream.next(m.rostime);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PR2GripperPressureData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_gripper_sensor_msgs::PR2GripperPressureData_<ContainerAllocator> & v) 
  {
    s << indent << "pressure_left[]" << std::endl;
    for (size_t i = 0; i < v.pressure_left.size(); ++i)
    {
      s << indent << "  pressure_left[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pressure_left[i]);
    }
    s << indent << "pressure_right[]" << std::endl;
    for (size_t i = 0; i < v.pressure_right.size(); ++i)
    {
      s << indent << "  pressure_right[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pressure_right[i]);
    }
    s << indent << "rostime: ";
    Printer<double>::stream(s, indent + "  ", v.rostime);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERPRESSUREDATA_H

