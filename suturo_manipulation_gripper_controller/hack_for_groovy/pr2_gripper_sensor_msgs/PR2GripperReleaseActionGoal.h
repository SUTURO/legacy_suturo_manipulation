/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-pr2-object-manipulation-0.7.5/debian/ros-groovy-pr2-object-manipulation/opt/ros/groovy/stacks/pr2_object_manipulation/manipulation/pr2_gripper_sensor_msgs/msg/PR2GripperReleaseActionGoal.msg */
#ifndef PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERRELEASEACTIONGOAL_H
#define PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERRELEASEACTIONGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "actionlib_msgs/GoalID.h"
#include "pr2_gripper_sensor_msgs/PR2GripperReleaseGoal.h"

namespace pr2_gripper_sensor_msgs
{
template <class ContainerAllocator>
struct PR2GripperReleaseActionGoal_ {
  typedef PR2GripperReleaseActionGoal_<ContainerAllocator> Type;

  PR2GripperReleaseActionGoal_()
  : header()
  , goal_id()
  , goal()
  {
  }

  PR2GripperReleaseActionGoal_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , goal_id(_alloc)
  , goal(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
   ::actionlib_msgs::GoalID_<ContainerAllocator>  goal_id;

  typedef  ::pr2_gripper_sensor_msgs::PR2GripperReleaseGoal_<ContainerAllocator>  _goal_type;
   ::pr2_gripper_sensor_msgs::PR2GripperReleaseGoal_<ContainerAllocator>  goal;


  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PR2GripperReleaseActionGoal
typedef  ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<std::allocator<void> > PR2GripperReleaseActionGoal;

typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal> PR2GripperReleaseActionGoalPtr;
typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal const> PR2GripperReleaseActionGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_gripper_sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e5f06f3717f8990527330a2e0eaa0c81";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe5f06f3717f89905ULL;
  static const uint64_t static_value2 = 0x27330a2e0eaa0c81ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_gripper_sensor_msgs/PR2GripperReleaseActionGoal";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalID goal_id\n\
PR2GripperReleaseGoal goal\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: pr2_gripper_sensor_msgs/PR2GripperReleaseGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal\n\
PR2GripperReleaseCommand command\n\
\n\
================================================================================\n\
MSG: pr2_gripper_sensor_msgs/PR2GripperReleaseCommand\n\
# the event conditions we would like to trigger the robot to release on\n\
PR2GripperEventDetectorCommand event\n\
================================================================================\n\
MSG: pr2_gripper_sensor_msgs/PR2GripperEventDetectorCommand\n\
# state variable that defines what events we would like to trigger on\n\
# Leaving this field blank will result in the robot triggering when \n\
# anything touches the sides of the finger or an impact is detected\n\
# with the hand/arm.\n\
int8 trigger_conditions\n\
# definitions for our various trigger_conditions values\n\
# trigger on either acceleration contact or finger sensor side impact\n\
int8 FINGER_SIDE_IMPACT_OR_ACC = 0\n\
# tigger once  both slip and acceleration signals occur\n\
int8 SLIP_AND_ACC = 1 \n\
#  trigger on either slip, acceleration, or finger sensor side impact\n\
int8 FINGER_SIDE_IMPACT_OR_SLIP_OR_ACC = 2\n\
# trigger only on slip information\n\
int8 SLIP = 3\n\
# trigger only on acceleration contact information\n\
int8 ACC = 4 \n\
\n\
\n\
# the amount of acceleration to trigger on (acceleration vector magnitude)\n\
# Units = m/s^2\n\
# The user needs to be concerned here about not setting the trigger too\n\
# low so that is set off by the robot's own motions.\n\
#\n\
# For large rapid motions, say by a motion planner, 5 m/s^2 is a good level\n\
# For small delicate controlled motions this can be set MUCH lower (try 2.0)\n\
#\n\
# NOTE: When moving the gripper joint (opening/closing the grippr)\n\
# the high gearing of the PR2 gripper causes large acceleration vibrations\n\
# which will cause triggering to occur. This is a known drawback of the PR2.\n\
#\n\
# NOTE: Leaving this value blank will result in a 0 m/s^2 trigger. If you\n\
# are using a trigger_conditions value that returns on acceleration contact\n\
# events then it will immediately exceed your trigger and return\n\
float64 acceleration_trigger_magnitude\n\
\n\
\n\
# the slip detector gain to trigger on (either finger) : try 0.01\n\
# higher values decrease slip sensitivty (to a point)\n\
# lower values increase sensitivity (to a point)\n\
#\n\
# NOTE: Leaving this value blank will result in the most sensitive slip level.\n\
float64 slip_trigger_magnitude\n\
";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.goal_id);
    stream.next(m.goal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PR2GripperReleaseActionGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_gripper_sensor_msgs::PR2GripperReleaseActionGoal_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
s << std::endl;
    Printer< ::pr2_gripper_sensor_msgs::PR2GripperReleaseGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERRELEASEACTIONGOAL_H

