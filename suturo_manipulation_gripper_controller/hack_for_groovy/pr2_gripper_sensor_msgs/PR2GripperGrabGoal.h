/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-pr2-object-manipulation-0.7.5/debian/ros-groovy-pr2-object-manipulation/opt/ros/groovy/stacks/pr2_object_manipulation/manipulation/pr2_gripper_sensor_msgs/msg/PR2GripperGrabGoal.msg */
#ifndef PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERGRABGOAL_H
#define PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERGRABGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "pr2_gripper_sensor_msgs/PR2GripperGrabCommand.h"

namespace pr2_gripper_sensor_msgs
{
template <class ContainerAllocator>
struct PR2GripperGrabGoal_ {
  typedef PR2GripperGrabGoal_<ContainerAllocator> Type;

  PR2GripperGrabGoal_()
  : command()
  {
  }

  PR2GripperGrabGoal_(const ContainerAllocator& _alloc)
  : command(_alloc)
  {
  }

  typedef  ::pr2_gripper_sensor_msgs::PR2GripperGrabCommand_<ContainerAllocator>  _command_type;
   ::pr2_gripper_sensor_msgs::PR2GripperGrabCommand_<ContainerAllocator>  command;


  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PR2GripperGrabGoal
typedef  ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<std::allocator<void> > PR2GripperGrabGoal;

typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal> PR2GripperGrabGoalPtr;
typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal const> PR2GripperGrabGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_gripper_sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4dec90ce1cb7519ca39577ac65441112";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4dec90ce1cb7519cULL;
  static const uint64_t static_value2 = 0xa39577ac65441112ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_gripper_sensor_msgs/PR2GripperGrabGoal";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal\n\
PR2GripperGrabCommand command\n\
\n\
================================================================================\n\
MSG: pr2_gripper_sensor_msgs/PR2GripperGrabCommand\n\
# The gain to use to evaluate how hard an object should be\n\
# grasped after it is contacted. This is based on hardness\n\
# estimation as outlined in TRO paper (see wiki).\n\
# \n\
# Try 0.03\n\
#\n\
# Units (N/(m/s^2))\n\
float64 hardness_gain\n\
\n\
";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.command);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PR2GripperGrabGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_gripper_sensor_msgs::PR2GripperGrabGoal_<ContainerAllocator> & v) 
  {
    s << indent << "command: ";
s << std::endl;
    Printer< ::pr2_gripper_sensor_msgs::PR2GripperGrabCommand_<ContainerAllocator> >::stream(s, indent + "  ", v.command);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERGRABGOAL_H

