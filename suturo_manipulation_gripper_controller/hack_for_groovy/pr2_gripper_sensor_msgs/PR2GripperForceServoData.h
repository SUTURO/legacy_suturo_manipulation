/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-pr2-object-manipulation-0.7.5/debian/ros-groovy-pr2-object-manipulation/opt/ros/groovy/stacks/pr2_object_manipulation/manipulation/pr2_gripper_sensor_msgs/msg/PR2GripperForceServoData.msg */
#ifndef PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFORCESERVODATA_H
#define PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFORCESERVODATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "pr2_gripper_sensor_msgs/PR2GripperSensorRTState.h"

namespace pr2_gripper_sensor_msgs
{
template <class ContainerAllocator>
struct PR2GripperForceServoData_ {
  typedef PR2GripperForceServoData_<ContainerAllocator> Type;

  PR2GripperForceServoData_()
  : stamp()
  , left_fingertip_pad_force(0.0)
  , right_fingertip_pad_force(0.0)
  , joint_effort(0.0)
  , force_achieved(false)
  , rtstate()
  {
  }

  PR2GripperForceServoData_(const ContainerAllocator& _alloc)
  : stamp()
  , left_fingertip_pad_force(0.0)
  , right_fingertip_pad_force(0.0)
  , joint_effort(0.0)
  , force_achieved(false)
  , rtstate(_alloc)
  {
  }

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef double _left_fingertip_pad_force_type;
  double left_fingertip_pad_force;

  typedef double _right_fingertip_pad_force_type;
  double right_fingertip_pad_force;

  typedef double _joint_effort_type;
  double joint_effort;

  typedef uint8_t _force_achieved_type;
  uint8_t force_achieved;

  typedef  ::pr2_gripper_sensor_msgs::PR2GripperSensorRTState_<ContainerAllocator>  _rtstate_type;
   ::pr2_gripper_sensor_msgs::PR2GripperSensorRTState_<ContainerAllocator>  rtstate;


  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PR2GripperForceServoData
typedef  ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<std::allocator<void> > PR2GripperForceServoData;

typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData> PR2GripperForceServoDataPtr;
typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData const> PR2GripperForceServoDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_gripper_sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d3960eb2ecb6a9b4c27065619e47fd06";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd3960eb2ecb6a9b4ULL;
  static const uint64_t static_value2 = 0xc27065619e47fd06ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_gripper_sensor_msgs/PR2GripperForceServoData";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Time the data was recorded at\n\
time stamp\n\
\n\
# the force experienced by the finger Pads  (N)\n\
# NOTE:this ignores data from the edges of the finger pressure\n\
float64 left_fingertip_pad_force\n\
float64 right_fingertip_pad_force\n\
\n\
# the current gripper virtual parallel joint effort (in N)\n\
float64 joint_effort\n\
\n\
# true when the gripper is no longer moving\n\
# and we have reached the desired force level\n\
bool force_achieved\n\
\n\
\n\
# the control state of our realtime controller\n\
PR2GripperSensorRTState rtstate\n\
\n\
================================================================================\n\
MSG: pr2_gripper_sensor_msgs/PR2GripperSensorRTState\n\
# the control state of our realtime controller\n\
int8 realtime_controller_state\n\
\n\
# predefined values to indicate our realtime_controller_state\n\
int8 DISABLED = 0\n\
int8 POSITION_SERVO = 3\n\
int8 FORCE_SERVO = 4\n\
int8 FIND_CONTACT = 5\n\
int8 SLIP_SERVO = 6\n\
";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stamp);
    stream.next(m.left_fingertip_pad_force);
    stream.next(m.right_fingertip_pad_force);
    stream.next(m.joint_effort);
    stream.next(m.force_achieved);
    stream.next(m.rtstate);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PR2GripperForceServoData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_gripper_sensor_msgs::PR2GripperForceServoData_<ContainerAllocator> & v) 
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "left_fingertip_pad_force: ";
    Printer<double>::stream(s, indent + "  ", v.left_fingertip_pad_force);
    s << indent << "right_fingertip_pad_force: ";
    Printer<double>::stream(s, indent + "  ", v.right_fingertip_pad_force);
    s << indent << "joint_effort: ";
    Printer<double>::stream(s, indent + "  ", v.joint_effort);
    s << indent << "force_achieved: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.force_achieved);
    s << indent << "rtstate: ";
s << std::endl;
    Printer< ::pr2_gripper_sensor_msgs::PR2GripperSensorRTState_<ContainerAllocator> >::stream(s, indent + "  ", v.rtstate);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFORCESERVODATA_H

