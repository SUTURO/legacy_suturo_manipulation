/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-pr2-object-manipulation-0.7.5/debian/ros-groovy-pr2-object-manipulation/opt/ros/groovy/stacks/pr2_object_manipulation/manipulation/pr2_gripper_sensor_msgs/msg/PR2GripperFindContactCommand.msg */
#ifndef PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFINDCONTACTCOMMAND_H
#define PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFINDCONTACTCOMMAND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace pr2_gripper_sensor_msgs
{
template <class ContainerAllocator>
struct PR2GripperFindContactCommand_ {
  typedef PR2GripperFindContactCommand_<ContainerAllocator> Type;

  PR2GripperFindContactCommand_()
  : zero_fingertip_sensors(false)
  , contact_conditions(0)
  {
  }

  PR2GripperFindContactCommand_(const ContainerAllocator& _alloc)
  : zero_fingertip_sensors(false)
  , contact_conditions(0)
  {
  }

  typedef uint8_t _zero_fingertip_sensors_type;
  uint8_t zero_fingertip_sensors;

  typedef int8_t _contact_conditions_type;
  int8_t contact_conditions;

  enum { BOTH = 0 };
  enum { LEFT = 1 };
  enum { RIGHT = 2 };
  enum { EITHER = 3 };

  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PR2GripperFindContactCommand
typedef  ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<std::allocator<void> > PR2GripperFindContactCommand;

typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand> PR2GripperFindContactCommandPtr;
typedef boost::shared_ptr< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand const> PR2GripperFindContactCommandConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_gripper_sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4a38a1a8e495aae86921ef2b292ec260";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4a38a1a8e495aae8ULL;
  static const uint64_t static_value2 = 0x6921ef2b292ec260ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_gripper_sensor_msgs/PR2GripperFindContactCommand";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# set true if you want to calibrate the fingertip sensors on the start\n\
# of the find_contact action. While this is not necessary (and\n\
# the default value will not calibrate the sensors) for best \n\
# performance it is recommended that you set this to true each time \n\
# you are calling find_contact and are confident the fingertips are \n\
# not touching anything\n\
# NOTE: SHOULD ONLY BE TRUE WHEN BOTH FINGERS ARE TOUCHING NOTHING\n\
bool zero_fingertip_sensors\n\
\n\
# the finger contact conditions that determine what our goal is\n\
# Leaving this field blank will result in the robot closing until\n\
# contact on BOTH fingers is achieved\n\
int8 contact_conditions\n\
\n\
# predefined values for the above contact_conditions variable\n\
int8 BOTH = 0   # both fingers must make contact\n\
int8 LEFT = 1   # just the left finger \n\
int8 RIGHT = 2  # just the right finger\n\
int8 EITHER = 3 # either finger, we don't care which\n\
\n\
";
  }

  static const char* value(const  ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.zero_fingertip_sensors);
    stream.next(m.contact_conditions);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PR2GripperFindContactCommand_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_gripper_sensor_msgs::PR2GripperFindContactCommand_<ContainerAllocator> & v) 
  {
    s << indent << "zero_fingertip_sensors: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.zero_fingertip_sensors);
    s << indent << "contact_conditions: ";
    Printer<int8_t>::stream(s, indent + "  ", v.contact_conditions);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_GRIPPER_SENSOR_MSGS_MESSAGE_PR2GRIPPERFINDCONTACTCOMMAND_H

