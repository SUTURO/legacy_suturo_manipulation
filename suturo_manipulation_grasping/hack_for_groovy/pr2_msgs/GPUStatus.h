/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-pr2-common-1.10.3/debian/ros-groovy-pr2-common/opt/ros/groovy/stacks/pr2_common/pr2_msgs/msg/GPUStatus.msg */
#ifndef PR2_MSGS_MESSAGE_GPUSTATUS_H
#define PR2_MSGS_MESSAGE_GPUSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace pr2_msgs
{
template <class ContainerAllocator>
struct GPUStatus_ {
  typedef GPUStatus_<ContainerAllocator> Type;

  GPUStatus_()
  : header()
  , product_name()
  , pci_device_id()
  , pci_location()
  , display()
  , driver_version()
  , temperature(0.0)
  , fan_speed(0.0)
  , gpu_usage(0.0)
  , memory_usage(0.0)
  {
  }

  GPUStatus_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , product_name(_alloc)
  , pci_device_id(_alloc)
  , pci_location(_alloc)
  , display(_alloc)
  , driver_version(_alloc)
  , temperature(0.0)
  , fan_speed(0.0)
  , gpu_usage(0.0)
  , memory_usage(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _product_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  product_name;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pci_device_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  pci_device_id;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _pci_location_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  pci_location;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _display_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  display;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _driver_version_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  driver_version;

  typedef float _temperature_type;
  float temperature;

  typedef float _fan_speed_type;
  float fan_speed;

  typedef float _gpu_usage_type;
  float gpu_usage;

  typedef float _memory_usage_type;
  float memory_usage;


  typedef boost::shared_ptr< ::pr2_msgs::GPUStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_msgs::GPUStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GPUStatus
typedef  ::pr2_msgs::GPUStatus_<std::allocator<void> > GPUStatus;

typedef boost::shared_ptr< ::pr2_msgs::GPUStatus> GPUStatusPtr;
typedef boost::shared_ptr< ::pr2_msgs::GPUStatus const> GPUStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_msgs::GPUStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_msgs::GPUStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_msgs::GPUStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_msgs::GPUStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_msgs::GPUStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4c74e5474b8aade04e56108262099c6e";
  }

  static const char* value(const  ::pr2_msgs::GPUStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4c74e5474b8aade0ULL;
  static const uint64_t static_value2 = 0x4e56108262099c6eULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_msgs::GPUStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_msgs/GPUStatus";
  }

  static const char* value(const  ::pr2_msgs::GPUStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_msgs::GPUStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
string product_name\n\
string pci_device_id\n\
string pci_location\n\
string display\n\
string driver_version\n\
float32 temperature # Temperature in Celcius\n\
float32 fan_speed # Fan speed in rad/s\n\
float32 gpu_usage # Usage in percent\n\
float32 memory_usage # Usage in percent\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::pr2_msgs::GPUStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr2_msgs::GPUStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr2_msgs::GPUStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_msgs::GPUStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.product_name);
    stream.next(m.pci_device_id);
    stream.next(m.pci_location);
    stream.next(m.display);
    stream.next(m.driver_version);
    stream.next(m.temperature);
    stream.next(m.fan_speed);
    stream.next(m.gpu_usage);
    stream.next(m.memory_usage);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GPUStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_msgs::GPUStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_msgs::GPUStatus_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "product_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.product_name);
    s << indent << "pci_device_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pci_device_id);
    s << indent << "pci_location: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.pci_location);
    s << indent << "display: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.display);
    s << indent << "driver_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.driver_version);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "fan_speed: ";
    Printer<float>::stream(s, indent + "  ", v.fan_speed);
    s << indent << "gpu_usage: ";
    Printer<float>::stream(s, indent + "  ", v.gpu_usage);
    s << indent << "memory_usage: ";
    Printer<float>::stream(s, indent + "  ", v.memory_usage);
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_MSGS_MESSAGE_GPUSTATUS_H

