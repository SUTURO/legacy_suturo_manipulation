/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-groovy-pr2-common-1.10.3/debian/ros-groovy-pr2-common/opt/ros/groovy/stacks/pr2_common/pr2_msgs/msg/PressureState.msg */
#ifndef PR2_MSGS_MESSAGE_PRESSURESTATE_H
#define PR2_MSGS_MESSAGE_PRESSURESTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace pr2_msgs
{
template <class ContainerAllocator>
struct PressureState_ {
  typedef PressureState_<ContainerAllocator> Type;

  PressureState_()
  : header()
  , l_finger_tip()
  , r_finger_tip()
  {
  }

  PressureState_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , l_finger_tip(_alloc)
  , r_finger_tip(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _l_finger_tip_type;
  std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  l_finger_tip;

  typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _r_finger_tip_type;
  std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  r_finger_tip;


  typedef boost::shared_ptr< ::pr2_msgs::PressureState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_msgs::PressureState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PressureState
typedef  ::pr2_msgs::PressureState_<std::allocator<void> > PressureState;

typedef boost::shared_ptr< ::pr2_msgs::PressureState> PressureStatePtr;
typedef boost::shared_ptr< ::pr2_msgs::PressureState const> PressureStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::pr2_msgs::PressureState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::pr2_msgs::PressureState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace pr2_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::pr2_msgs::PressureState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::pr2_msgs::PressureState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::pr2_msgs::PressureState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "756fb3b75fa8884524fd0789a78eb04b";
  }

  static const char* value(const  ::pr2_msgs::PressureState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x756fb3b75fa88845ULL;
  static const uint64_t static_value2 = 0x24fd0789a78eb04bULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_msgs::PressureState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pr2_msgs/PressureState";
  }

  static const char* value(const  ::pr2_msgs::PressureState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::pr2_msgs::PressureState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Output from finger-tip pressure sensors on PR2\n\
#Higher number correspond to more pressure, but there is no explicit unit and you will have to calibrate for offset\n\
#The numbers reported are the raw values from the I2C hardware\n\
\n\
Header header\n\
int16[] l_finger_tip\n\
int16[] r_finger_tip\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::pr2_msgs::PressureState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::pr2_msgs::PressureState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::pr2_msgs::PressureState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::pr2_msgs::PressureState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.l_finger_tip);
    stream.next(m.r_finger_tip);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PressureState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_msgs::PressureState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::pr2_msgs::PressureState_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "l_finger_tip[]" << std::endl;
    for (size_t i = 0; i < v.l_finger_tip.size(); ++i)
    {
      s << indent << "  l_finger_tip[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.l_finger_tip[i]);
    }
    s << indent << "r_finger_tip[]" << std::endl;
    for (size_t i = 0; i < v.r_finger_tip.size(); ++i)
    {
      s << indent << "  r_finger_tip[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.r_finger_tip[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // PR2_MSGS_MESSAGE_PRESSURESTATE_H

